# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BLGkhPfEemiSC6oTM_HeNq5ST_heOhAk
"""
import streamlit as st
import numpy as np
import tensorflow as tf
from tensorflow.keras.layers import Input, Dense, Reshape, Embedding, Concatenate, Flatten
from tensorflow.keras.models import Model
from tensorflow.keras.utils import to_categorical

# Set page config
st.set_page_config(page_title="MNIST Digit Generator", layout="centered")

# Title
st.title("ðŸ§  MNIST Digit Generator")
st.markdown("Generate 5 handwritten digit images based on a trained Conditional Variational Autoencoder (CVAE).")

# Load decoder model architecture and weights
@st.cache_resource
def load_decoder():
    decoder = build_decoder()
    decoder.load_weights("decoder_weights.h5")
    return decoder

# Decoder architecture (must match training)
def build_decoder(latent_dim=2):
    z_input = Input(shape=(latent_dim,))
    label_input = Input(shape=(10,))
    x = Concatenate()([z_input, label_input])
    x = Dense(128, activation='relu')(x)
    x = Dense(256, activation='relu')(x)
    x = Dense(28 * 28, activation='sigmoid')(x)
    output = Reshape((28, 28))(x)
    return Model([z_input, label_input], output)

decoder = load_decoder()

# Digit selection
digit = st.selectbox("Select a digit to generate", list(range(10)))

# Generate images
if st.button("Generate Images"):
    z_samples = np.random.normal(size=(5, 2))  # 2D latent space
    labels = np.array([digit] * 5)
    labels_one_hot = to_categorical(labels, num_classes=10)

    # Generate images
    generated_images = decoder.predict([z_samples, labels_one_hot])

    st.subheader(f"Generated images for digit: {digit}")
    cols = st.columns(5)
    for i in range(5):
        img = (generated_images[i] * 255).astype(np.uint8)
        cols[i].image(img, width=100, clamp=True)
