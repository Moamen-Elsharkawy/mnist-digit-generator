# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BLGkhPfEemiSC6oTM_HeNq5ST_heOhAk
"""
import streamlit as st
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Dense, Concatenate, Reshape

# Constants
LATENT_DIM = 2
NUM_CLASSES = 10
IMAGE_SHAPE = (28, 28, 1)

# Build decoder model
@st.cache_resource
def load_decoder():
    # Define the decoder architecture
    latent_inputs = Input(shape=(LATENT_DIM,))
    label_inputs = Input(shape=(NUM_CLASSES,))
    x = Concatenate()([latent_inputs, label_inputs])
    x = Dense(128, activation='relu')(x)
    x = Dense(256, activation='relu')(x)
    x = Dense(28 * 28, activation='sigmoid')(x)
    outputs = Reshape(IMAGE_SHAPE)(x)

    decoder = Model([latent_inputs, label_inputs], outputs, name="decoder")
    decoder.load_weights("decoder_weights.weights.h5")
    return decoder

# Load decoder model
decoder = load_decoder()

# Streamlit UI
st.title("MNIST Digit Generator")
st.write("This app generates MNIST-like handwritten digits using a trained Conditional Variational Autoencoder (CVAE).")

# Select digit class
digit_class = st.selectbox("Choose a digit (0-9):", list(range(10)))
label = tf.keras.utils.to_categorical([digit_class], NUM_CLASSES)

# Latent space slider
z1 = st.slider("Latent Dimension 1", -3.0, 3.0, 0.0)
z2 = st.slider("Latent Dimension 2", -3.0, 3.0, 0.0)
z_sample = np.array([[z1, z2]])

# Generate image
if st.button("Generate Image"):
    generated_image = decoder.predict([z_sample, label])
    generated_image = generated_image[0, :, :, 0]  # Remove batch and channel dims

    st.image(generated_image, caption=f"Generated Digit: {digit_class}", width=200, clamp=True)

    cols = st.columns(5)
    for i in range(5):
        img = (generated_images[i] * 255).astype(np.uint8)
        cols[i].image(img, width=100, clamp=True)
